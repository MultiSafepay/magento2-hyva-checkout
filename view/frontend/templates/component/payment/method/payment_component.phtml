<?php
/**
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is provided with Magento in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * Copyright Â© MultiSafepay, Inc. All rights reserved.
 * See DISCLAIMER.md for disclaimer details.
 */

declare(strict_types=1);

/** @var Template $block */
/** @var MultiSafepaypaymentComponent $magewire */
/** @var Escaper $escaper */

use MultiSafepay\HyvaCheckout\Payment\Method\MultiSafepaypaymentComponent;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

?>
<script>
<?php if ($magewire->isPaymentComponentEnabled()) {?>
    window.addEventListener('checkout:payment:method-activate', event => {
        let paymentComponent;

        if (event.detail.method !== '<?= $escaper->escapeJs($magewire->getMethodCode()) ?>' ||
            !document.getElementById('multisafepay-<?= $escaper->escapeJs($magewire->getMethodCode()) ?>-component')
        ) {
            return;
        }

        let orderData = {
            currency: '<?= $escaper->escapeJs($magewire->getCurrency()) ?>',
            amount: '<?= $escaper->escapeJs($magewire->getAmount()) ?>',
            template: {
                settings: {
                    embed_mode: true,
                },
                merge: true
            },
            customer: {
                locale: '<?= $escaper->escapeJs($magewire->getLocale()) ?>',
                country: '<?= $escaper->escapeJs($magewire->getCountry()) ?>'
            }
        }

        let recurringData;

        <?php if ($magewire->getTokens()) { ?>
        recurringData = {
            model: 'cardOnFile',
            tokens: <?= $magewire->getTokens() ?>
        }
        <?php } ?>

        let paymentComponentData = {
            env: '<?= $escaper->escapeJs($magewire->getEnvironment()) ?>',
            apiToken: '<?= $escaper->escapeJs($magewire->getApiToken()) ?>',
            order: orderData
        };

        if (recurringData) {
            paymentComponentData.recurring = recurringData;
        }

        paymentComponent = new MultiSafepay(paymentComponentData);

        paymentComponent.init('payment', {
            container: '#multisafepay-<?= $escaper->escapeJs($magewire->getMethodCode()) ?>-component',
            gateway: '<?= $escaper->escapeJs($magewire->getGatewayCode()) ?>',
            onError: state => {
                let paymentComponentDataJson = JSON.stringify(paymentComponentData, null, 2);
                let error = 'Payment Component error: ' + JSON.stringify( state, null, 2);

                <?php if ($magewire->isDebugModeEnabled()) { ?>
                console.log(error);
                <?php } ?>

                const component = '<?= $escaper->escapeJs($block->getNameInLayout()) ?>';
                Magewire.find(component).logPaymentComponentError(error, paymentComponentDataJson);
            }
        })

        hyvaCheckout.validation.register(event.detail.method, async () => {
                let paymentData = await paymentComponent.getPaymentData();
                const component = '<?= $escaper->escapeJs($block->getNameInLayout()) ?>';

                if (paymentComponent.hasErrors()) {
                    return false;
                }

                Magewire.find(component).setPaymentComponentData({
                    payload: paymentData.payload,
                    tokenize: paymentData.tokenize ?? false
                })

                return new Promise(resolve => setTimeout(() => resolve(true), 1000));
            }, document.querySelector('#multisafepay-<?= $escaper->escapeJs($magewire->getMethodCode()) ?>-component'), 'payment'
        );
    })
<?php } ?>
</script>
<?php isset($hyvaCsp) && $hyvaCsp->registerInlineScript() ?>
